var FileGenerator = Class.create();
FileGenerator.prototype = {

    initialize: function(name) {
        this.Name = name;

        // Package
        this.Properties = Packages.java.util.Properties;
        this.StringUtil = Packages.com.glide.util.StringUtil;
        this.BufferedWriter = Packages.java.io.BufferedWriter;
        this.File = Packages.java.io.File;
        this.FileWriter = Packages.java.io.FileWriter;
        this.FileOutputStream = Packages.java.io.FileOutputStream;
        this.FileInputStream = Packages.java.io.FileInputStream;
        this.OutputStream = Packages.java.io.OutputStream;
        this.OutputStreamWriter = Packages.java.io.OutputStreamWriter;
        // added bufferedoutputstream to encode file
        this.BufferedOutputStream = Packages.java.io.BufferedOutputStream;
        this.Thread = Packages.java.lang.Thread;
        this.URL = Packages.java.net.URL;
        this.URLConnection = Packages.java.net.URLConnection;
        this.String = Packages.java.lang.String;
	this.PrintStream = Packages.java.io.PrintStream;

        this.fileContentStr = probe.getParameter("file_content");
        this.fileNameStr = probe.getParameter("file_name");
        this.filePathStr = probe.getParameter("file_path");

        this.ftpUrl = "ftp://%s:%s@%s/%s;type=i";
        this.ftpHost = probe.getParameter("ftp_host");
        this.ftpUser = probe.getParameter("ftp_user");
        this.ftpPass = probe.getParameter("ftp_password");
        this.ftpUploadPath =  this.filePathStr + '/' +  this.fileNameStr;
        this.ftpUrl = this.String.format(this.ftpUrl, this.ftpUser, this.ftpPass, this.ftpHost, this.ftpUploadPath);
    },

    processFTP: function() {
        var buffer = null;
        var exceptionOccurred = false;
        var errorMes = '';
        try {
            var url = this.URL(this.ftpUrl);
            var conn = url.openConnection();
            var outputStream = conn.getOutputStream();
            buffer = this.BufferedOutputStream(outputStream);
	    var output = this.PrintStream(buffer);
            output.print(this.fileContentStr);
			
	    buffer.close();
            outputStream.close();
	    output.close();
        } catch (e) {
            exceptionOccurred = true;
            errorMes = e.toString();
            this._log('ERROR', 'FileExport: Error: ' + errorMes);
        } finally {
            if (buffer != null)
                buffer.close();
        }

        if (exceptionOccurred) {
            return 'FileExport: Error: ' + errorMes;
        } else {
            return "Complete";
        }
    },

    _log: function(level, message) {
        ms.log(this.Name + ' [' + level + ']: ' + message);
    },


    type: 'FileGenerator'

};
